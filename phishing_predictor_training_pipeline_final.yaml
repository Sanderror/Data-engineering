# PIPELINE DEFINITION
# Name: phishing-predictor-training-pipeline-final
# Description: This pipeline downloads the phishing dataset, trains 3 models, compares those models,        chooses the best model, and uploads that model to the model bucket in cloud storage
# Inputs:
#    data_bucket: str
#    filename: str
#    model_repo: str
#    model_repo_uri: str
#    project_id: str
components:
  comp-compare-model:
    executorLabel: exec-compare-model
    inputDefinitions:
      parameters:
        lr_metrics:
          parameterType: STRUCT
        rf_metrics:
          parameterType: STRUCT
        svm_metrics:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-condition-1:
    dag:
      tasks:
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-svm-out_model
            parameters:
              model_name:
                runtimeValue:
                  constant: SVM
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-svm-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        upload-model-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-2
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-rf-out_model
            parameters:
              model_name:
                runtimeValue:
                  constant: RF
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--train-rf-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-condition-3:
    dag:
      tasks:
        upload-model-to-gcs-3:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-3
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-lr-out_model
            parameters:
              model_name:
                runtimeValue:
                  constant: LR
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-3
    inputDefinitions:
      artifacts:
        pipelinechannel--train-lr-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-load-data:
    executorLabel: exec-load-data
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        filename:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-rf:
    executorLabel: exec-train-rf
    inputDefinitions:
      artifacts:
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-svm:
    executorLabel: exec-train-svm
    inputDefinitions:
      artifacts:
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-test-split:
    executorLabel: exec-train-test-split
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_name:
          parameterType: STRING
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-2:
    executorLabel: exec-upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_name:
          parameterType: STRING
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-3:
    executorLabel: exec-upload-model-to-gcs-3
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_name:
          parameterType: STRING
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-compare-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compare_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compare_model(svm_metrics: dict, rf_metrics: dict, lr_metrics:\
          \ dict) -> str:\n    '''Compare the SVM, RF, and LR model's performances\
          \ on the test set with each other\n    and return the best model on recall\
          \ (with at least an accuracy of 0.7). We want to optimize\n    recall, because\
          \ the higher the recall, the minimal the type II error. The type II error\
          \ in our\n    case means predicting that it is not a phishing link when\
          \ in reality it is. This is a bigger \n    problem than predicting that\
          \ it is a phishing link, when in reality it is not (better safe than sorry).\n\
          \    '''\n    import logging\n    import json\n    import sys\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n    logging.info(svm_metrics)\n    logging.info(rf_metrics)\n\
          \    logging.info(lr_metrics)\n\n    # Obtain the recall and accuracy for\
          \ the 3 models\n    svm_recall = svm_metrics.get('recall')\n    svm_accuracy\
          \ = svm_metrics.get('accuracy')\n\n    rf_recall = rf_metrics.get('recall')\n\
          \    rf_accuracy = rf_metrics.get('accuracy')\n\n    lr_recall = lr_metrics.get('recall')\n\
          \    lr_accuracy = lr_metrics.get('accuracy')\n\n    # We iteratively update\
          \ the best_recall score and in this way can find the best model\n    best_model\
          \ = None\n    best_recall = 0\n\n    # Compare SVM model\n    if svm_accuracy\
          \ >= 0.7 and svm_recall > best_recall:\n        best_model = 'SVM'\n   \
          \     best_recall = svm_recall\n\n    # Compare Random Forest model\n  \
          \  if rf_accuracy >= 0.7 and rf_recall > best_recall:\n        best_model\
          \ = 'RF'\n        best_recall = rf_recall\n\n    # Compare Logistic Regression\
          \ model\n    if lr_accuracy >= 0.7 and lr_recall > best_recall:\n      \
          \  best_model = 'LR'\n        best_recall = lr_recall\n\n    # It could\
          \ be the case that none of the models had an accuracy higher than 0.7\n\
          \    # In that case, we want to use the model with the highest accuracy\n\
          \    if best_model is None:\n        if svm_accuracy > lr_accuracy:\n  \
          \          if svm_accuracy > rf_accuracy:\n                best_model =\
          \ \"SVM\"\n            else:\n                best_model = \"RF\"\n    \
          \    else:\n            if lr_accuracy > rf_accuracy:\n                best_model\
          \ = \"LR\"\n            else:\n                best_model = \"RF\"\n\n \
          \   return best_model\n\n"
        image: python:3.10.7-slim
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(project_id: str, bucket: str, filename: str, dataset:\
          \ Output[Dataset]):\n    '''download data'''\n    from google.cloud import\
          \ storage\n    import pandas as pd\n    import logging \n    import sys\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ # Downloaing the phishing dataset file from the google storage data bucket\
          \ \n    client = storage.Client(project=project_id)\n    bucket = client.bucket(bucket)\n\
          \    blob = bucket.blob(filename)\n    blob.download_to_filename(dataset.path\
          \ + \".csv\")\n    logging.info('Downloaded Data!')\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(train_set: Input[Dataset], test_set: Input[Dataset],\
          \ out_model: Output[Model]) -> NamedTuple('outputs', metrics=dict):\n  \
          \  '''train a Logistic Regression with default parameters'''\n    import\
          \ pandas as pd\n    from sklearn.linear_model import LogisticRegression\n\
          \    from sklearn.metrics import recall_score, accuracy_score\n    import\
          \ json\n    import logging \n    import sys\n    import os\n    import pickle\
          \  \n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n\
          \    # Load the train and test sets into dataframes\n    df_train = pd.read_csv(train_set.path+\"\
          .csv\")\n    df_test = pd.read_csv(test_set.path+\".csv\")\n\n    logging.info(df_train.columns)\n\
          \    logging.info(df_test.columns)  \n\n    # Split the train and test sets\
          \ into the X variables and the y variable\n    x_train, y_train = df_train.drop('CLASS_LABEL',\
          \ axis=1), df_train['CLASS_LABEL']\n    x_test, y_test = df_test.drop('CLASS_LABEL',\
          \ axis=1), df_test['CLASS_LABEL']\n\n    # Train a Logistic Regression on\
          \ the train data and predict the test data    \n    model_lr = LogisticRegression(random_state=42)\n\
          \    model_lr.fit(x_train,y_train)\n    y_pred = model_lr.predict(x_test)\n\
          \n    # Store the accuracy and recall of the model on the test set in a\
          \ dictionary\n    metrics_dict = {\n        \"accuracy\": accuracy_score(y_test,\
          \ y_pred),\n        \"recall\": recall_score(y_test, y_pred)\n    }\n  \
          \  logging.info(metrics_dict)  \n\n    # Store some metadata\n    out_model.metadata[\"\
          file_type\"] = \".pkl\"\n    out_model.metadata[\"algorithm\"] = \"LR\"\n\
          \n    # Save the model to a pickle file\n    model_file = out_model.path\
          \ + \".pkl\"\n    with open(model_file, 'wb') as f:  \n        pickle.dump(model_lr,\
          \ f)   \n\n    # Return the metrics dictionary as an output\n    outputs\
          \ = NamedTuple('outputs', metrics=dict)\n    return outputs(metrics_dict)\n\
          \n"
        image: python:3.10.7-slim
    exec-train-rf:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_rf
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_rf(train_set: Input[Dataset], test_set: Input[Dataset],\
          \ out_model: Output[Model]) -> NamedTuple('outputs', metrics=dict):\n  \
          \  '''train a Random Forest with default parameters'''\n    import pandas\
          \ as pd\n    from sklearn.ensemble import RandomForestClassifier\n    from\
          \ sklearn.metrics import recall_score, accuracy_score\n    import json\n\
          \    import logging \n    import sys\n    import os\n    import pickle \
          \ \n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n\
          \    # Load the train and test sets into dataframes\n    df_train = pd.read_csv(train_set.path+\"\
          .csv\")\n    df_test = pd.read_csv(test_set.path+\".csv\")\n\n    logging.info(df_train.columns)\n\
          \    logging.info(df_test.columns)  \n\n    # Split the train and test sets\
          \ into the X variables and the y variable\n    x_train, y_train = df_train.drop('CLASS_LABEL',\
          \ axis=1), df_train['CLASS_LABEL']\n    x_test, y_test = df_test.drop('CLASS_LABEL',\
          \ axis=1), df_test['CLASS_LABEL']\n\n    # Train a RF Classifier on the\
          \ train data and predict the test data\n    model_rf = RandomForestClassifier(random_state=42)\
          \ \n    model_rf.fit(x_train,y_train)\n    y_pred = model_rf.predict(x_test)\n\
          \n    # Store the accuracy and recall of the model on the test set in a\
          \ dictionary\n    metrics_dict = {\n        \"accuracy\": accuracy_score(y_test,\
          \ y_pred),\n        \"recall\": recall_score(y_test, y_pred)\n    }\n  \
          \  logging.info(metrics_dict)  \n\n    # Store some metadata\n    out_model.metadata[\"\
          file_type\"] = \".pkl\"\n    out_model.metadata[\"algorithm\"] = \"RF\"\n\
          \n    # Save the model to a pickle file\n    model_file = out_model.path\
          \ + \".pkl\"\n    with open(model_file, 'wb') as f:  \n        pickle.dump(model_rf,\
          \ f)   \n\n    # Return the metrics dictionary as an output\n    outputs\
          \ = NamedTuple('outputs', metrics=dict)\n    return outputs(metrics_dict)\n\
          \n"
        image: python:3.10.7-slim
    exec-train-svm:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_svm
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_svm(train_set: Input[Dataset], test_set: Input[Dataset],\
          \ out_model: Output[Model]) -> NamedTuple('outputs', metrics=dict):\n  \
          \  '''train a SVM with default parameters'''\n    import pandas as pd\n\
          \    from sklearn import svm\n    from sklearn import metrics\n    from\
          \ sklearn.metrics import recall_score, accuracy_score\n    import json\n\
          \    import logging \n    import sys\n    import os\n    import pickle \
          \ \n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n\
          \    # Load the train and test sets into dataframes\n    df_train = pd.read_csv(train_set.path+\"\
          .csv\")\n    df_test = pd.read_csv(test_set.path+\".csv\")\n\n    logging.info(df_train.columns)\n\
          \    logging.info(df_test.columns)  \n\n    # Split the train and test sets\
          \ into the X variables and the y variable\n    x_train, y_train = df_train.drop('CLASS_LABEL',\
          \ axis=1), df_train['CLASS_LABEL']\n    x_test, y_test = df_test.drop('CLASS_LABEL',\
          \ axis=1), df_test['CLASS_LABEL']\n\n    # Train a SVM Classifier on the\
          \ train data and predict the test data\n    model_svm = svm.SVC(random_state=42)\n\
          \    model_svm.fit(x_train,y_train)\n    y_pred = model_svm.predict(x_test)\n\
          \n    # Store the accuracy and recall of the model on the test set in a\
          \ dictionary\n    metrics_dict = {\n        \"accuracy\": accuracy_score(y_test,\
          \ y_pred),\n        \"recall\": recall_score(y_test, y_pred)\n    }\n  \
          \  logging.info(metrics_dict)  \n\n    # Store some metadata\n    out_model.metadata[\"\
          file_type\"] = \".pkl\"\n    out_model.metadata[\"algorithm\"] = \"SVM\"\
          \n\n    # Save the model to a pickle file\n    model_file = out_model.path\
          \ + \".pkl\"\n    with open(model_file, 'wb') as f:  \n        pickle.dump(model_svm,\
          \ f)   \n\n    # Return the metrics dictionary as an output\n    outputs\
          \ = NamedTuple('outputs', metrics=dict)\n    return outputs(metrics_dict)\n\
          \n"
        image: python:3.10.7-slim
    exec-train-test-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_split(dataset: Input[Dataset], dataset_train: Output[Dataset],\
          \ dataset_test: Output[Dataset]):\n    '''train_test_split'''\n    import\
          \ pandas as pd\n    import logging \n    import sys\n    from sklearn.model_selection\
          \ import train_test_split as tts\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO) \n\n    # Split the phishing dataset into a train\
          \ set (80%) and test set (20%) and store those datasets\n    alldata = pd.read_csv(dataset.path+\"\
          .csv\", index_col=None)\n    train, test = tts(alldata, test_size=0.2, random_state=42)\n\
          \    train.to_csv(dataset_train.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \    test.to_csv(dataset_test.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model], model_name: str):\n    '''Upload the best model to Google\
          \ Cloud Storage models bucket'''\n    from google.cloud import storage \
          \  \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # Upload the model to GCS, and store it\
          \ as model-A1.pkl\n    client = storage.Client(project=project_id)\n   \
          \ bucket = client.bucket(model_repo)\n    blob = bucket.blob('model-A1.pkl')\n\
          \    source_file_name= model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model], model_name: str):\n    '''Upload the best model to Google\
          \ Cloud Storage models bucket'''\n    from google.cloud import storage \
          \  \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # Upload the model to GCS, and store it\
          \ as model-A1.pkl\n    client = storage.Client(project=project_id)\n   \
          \ bucket = client.bucket(model_repo)\n    blob = bucket.blob('model-A1.pkl')\n\
          \    source_file_name= model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model], model_name: str):\n    '''Upload the best model to Google\
          \ Cloud Storage models bucket'''\n    from google.cloud import storage \
          \  \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # Upload the model to GCS, and store it\
          \ as model-A1.pkl\n    client = storage.Client(project=project_id)\n   \
          \ bucket = client.bucket(model_repo)\n    blob = bucket.blob('model-A1.pkl')\n\
          \    source_file_name= model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  description: This pipeline downloads the phishing dataset, trains 3 models, compares
    those models,        chooses the best model, and uploads that model to the model
    bucket in cloud storage
  name: phishing-predictor-training-pipeline-final
root:
  dag:
    tasks:
      compare-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compare-model
        dependentTasks:
        - train-lr
        - train-rf
        - train-svm
        inputs:
          parameters:
            lr_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-lr
            rf_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-rf
            svm_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-svm
        taskInfo:
          name: compare-model
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - compare-model
        - train-svm
        inputs:
          artifacts:
            pipelinechannel--train-svm-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-svm
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-1
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'SVM'
      condition-2:
        componentRef:
          name: comp-condition-2
        dependentTasks:
        - compare-model
        - train-rf
        inputs:
          artifacts:
            pipelinechannel--train-rf-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-rf
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-2
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'RF'
      condition-3:
        componentRef:
          name: comp-condition-3
        dependentTasks:
        - compare-model
        - train-lr
        inputs:
          artifacts:
            pipelinechannel--train-lr-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-lr
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-3
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'LR'
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            filename:
              componentInputParameter: filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: load-data
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
            train_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-lr
      train-rf:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-rf
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
            train_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-rf
      train-svm:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-svm
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
            train_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-svm
      train-test-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-split
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: load-data
        taskInfo:
          name: train-test-split
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      filename:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      model_repo_uri:
        parameterType: STRING
      project_id:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
